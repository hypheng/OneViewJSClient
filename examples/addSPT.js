const co = require('co');

const OneViewClient = require('..');
const config = require('./config');

// Create server profile templates in OneView
// Tested only again 3.10 OneView
module.exports = function addSPT(ip) {
  return co(function*() {
    const client = new OneViewClient(ip, config.credential, true);
    yield client.login();

    const DefaultEnclosureGroupName = 'defaultEnclosureGroup';
    const eg = (yield client.getAllMembers({
      uri: '/rest/enclosure-groups',
    })).filter(eg => eg.name === DefaultEnclosureGroupName)[0];
    const shtArray = yield client.getAllMembers({
      uri: '/rest/server-hardware-types',
    });
    const sptArray = yield client.getAllMembers({
      uri: '/rest/server-profile-templates',
    });

    console.log(`[${ip}] There exist ${sptArray.length} SPT ${shtArray.length} SHT`);

    const sptNames = new Set(sptArray.map(spt => spt.name));
    let promises = [];
    for(let i = 0; i < (1024 / shtArray.length) + 1; i += 1) {
      for(let j = 0; j < shtArray.length; j += 1) {
        const sht = shtArray[j];
        const newSPTName = `${sht.name}-${i}`;
        promises.push(co(function* creatSPTGen() {
          if (!sptNames.has(newSPTName)) {
            const postRes = yield client.post({
              uri: '/rest/server-profile-templates',
              resolveWithFullResponse: true,
              body: {
                "type": "ServerProfileTemplateV3",
                "serverProfileDescription": "",
                "serverHardwareTypeUri": sht.uri,
                "enclosureGroupUri": eg.uri,
                "serialNumberType": "Virtual",
                "macType": "Virtual",
                "wwnType": "Virtual",
                "name": newSPTName,
                "description": newSPTName,
                "affinity": "Bay",
                "connectionSettings": {
                  "connections": [],
                  "manageConnections": true
                },
                "boot": {
                  "manageBoot": true,
                  "order": [
                    "CD",
                    "USB",
                    "HardDisk",
                    "PXE"
                  ]
                },
                "bootMode": newSPTName.match(/Gen9/) ? {
                  "manageMode": true,
                  "mode": "BIOS"
                } : undefined,
                "firmware": {
                  "manageFirmware": false,
                  "firmwareBaselineUri": "",
                  "forceInstallFirmware": false,
                  "firmwareInstallType": null,
                  "firmwareActivationType": "Immediate"
                },
                "bios": {
                  "manageBios": false,
                  "overriddenSettings": []
                },
                "hideUnusedFlexNics": true,
                "iscsiInitiatorNameType": "AutoGenerated",
                "localStorage": {
                  "sasLogicalJBODs": [],
                  "controllers": []
                },
                "sanStorage": null,
                "osDeploymentSettings": null
              },
            }).catch(err => {
              console.log(`[${ip}] post spt error for ${newSPTName}, ${err.message}`);
              return null;
            });

            if (postRes) {
              console.log(`[${ip}] server spt is posted, task: ${postRes.headers.location}`);
              const spt = yield client.waitTaskComplete(postRes.headers.location).catch(err => {
                console.log(`[${ip}] server spt ${newSPTName} is not created because ${err.taskErrors ? JSON.stringify(err) : err.taskErrors[0].message}`);
                return null;
              });
              if (spt) {
                console.log(`[${ip}] spt ${spt.name} is created`);
              }
            }
          }
        }));
      }
      yield Promise.all(promises);
      promises = [];
    }
  });
};

if (require.main === module) {
  module.exports(process.argv[2]).then(() => {
    console.log('Done');
  }).catch((err) => {
    if (err instanceof Error) {
      console.error(`[${process.argv[2]}] ${err.message}, stack:${err.stack}`);
    } else {
      console.error(JSON.stringify(err));
    }
  });
}
